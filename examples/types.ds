#[
    To force types use this pragma at the top:

    #! typed
]#

#[
    char    = Character
    str     = String
    int     = Integer 
    float   = float
    bool    = Boolean
    nil     = null/nil
]#

#! typed

# untyped variable, dynamic typing
name = "Ringo"
puts name

# typed variable, with optional strict typing
name: str = "Jules"
puts name

# method with typed parameters and return type
def ğŸ˜±(name: str) -> str
    puts "Hello, #{name}!"
end
ğŸ˜±("Peet")

# method with dynamic parameters and return type
def greet(name)
    puts "Hello, #{name}!"
end
greet("V")

# not working yet....
# Union type example (an argument can be a String or Nil)
def greet(country: str | nil) -> str
    country: str = "Portual"

    if country.nil?
        puts "Ahhh, I don't know where I'm from!"
    else
        puts "Hello, I'm from #{country}!"
    end
end

# Nullable shorthand with ?
def find_user(id: int) -> User?
    # returns User or nil
end
